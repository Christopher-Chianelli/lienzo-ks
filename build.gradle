import java.util.List
import java.net.InetAddress
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'

compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.7

version = '2.0.100'

repositories {
    mavenCentral()
    maven { url "${sonatype_snapshotURL}" }
}

sourceSets {
    main {
        resources { source java }
        java { srcDir 'src/main/java' }
    }
}

dependencies {
    runtime(group: 'com.arcbees.analytics', name: 'universal-analytics', version: '2.0')
    compile(group: 'com.arcbees.analytics', name: 'universal-analytics', version: '2.0')
    compile(group: 'com.ahome-it', name: 'lienzo-charts', version: '1.0.100-SNAPSHOT')
    providedCompile(fileTree(dir: 'war/WEB-INF/lib', include: '*.jar'))
    providedCompile(group: 'com.google.gwt', name: 'gwt-dev', version: '2.7.0')
    providedCompile(group: 'com.google.gwt', name: 'gwt-user', version: '2.7.0')
    providedCompile(group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0')
}

task copySrc(type: Copy) {
    from 'src/main/java'
    into 'build/classes/main'
}

task('gwtCompileWebApp', dependsOn: classes, type: JavaExec) {
    ext.buildDir = "${project.buildDir}/webapp"
    inputs.source sourceSets.main.java.srcDirs
    inputs.dir sourceSets.main.output.resourcesDir
    outputs.dir buildDir
    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
    doFirst {
        file(buildDir).mkdirs()
    }
    main = 'com.google.gwt.dev.Compiler'
    classpath {
        [sourceSets.main.java.srcDirs, sourceSets.main.output.classesDir, sourceSets.main.compileClasspath,]
    }
    args =
            [
                'com.ait.lienzo.ks.LienzoKS',
                '-war',
                buildDir,
                '-logLevel',
                'INFO',
                '-style',
                'OBF',
                '-localWorkers',
                '4',
                '-XenableClosureCompiler',
            ]
    maxHeapSize = '2048M'
    minHeapSize = '2048M'
}

war.dependsOn(gwtCompileWebApp,copySrc)
war {
    manifest {
        attributes 'Implementation-Title': 'Lienzo-KS', 'Implementation-Version': version
    }
    from('war', gwtCompileWebApp.buildDir)
    webInf { from 'war/WEB-INF' }
    webXml = file('war/WEB-INF/web.xml')
    archiveName 'lienzo-ks.war'
}